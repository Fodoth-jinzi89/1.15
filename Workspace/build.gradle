buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'net.minecraftforge.gradle'

repositories {
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
}

version = '1.0'
group = 'com.yourname.modid' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'modid'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {

    mappings channel: 'snapshot', version: "${mcp_mappings}"
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                CoFHCore {
                    source project(':CoFHCore').sourceSets.main
                }
                // CoFHWorld {
                //     source project(':CoFHWorld').sourceSets.main
                // }
                ArchersParadox {
                    source project(':ArchersParadox').sourceSets.main
                }
                Ensorcellation {
                    source project(':Ensorcellation').sourceSets.main
                }
                // Quartermastery {
                //     source project(':Quartermastery').sourceSets.main
                // }

                ThermalCore {
                    source project(':ThermalCore').sourceSets.main
                }
                ThermalCultivation {
                    source project(':ThermalCultivation').sourceSets.main
                }
                ThermalDynamics {
                    source project(':ThermalDynamics').sourceSets.main
                }
                ThermalEssentials {
                    source project(':ThermalEssentials').sourceSets.main
                }
                ThermalExpansion {
                    source project(':ThermalExpansion').sourceSets.main
                }
                ThermalFoundation {
                    source project(':ThermalFoundation').sourceSets.main
                }
                ThermalInnovation {
                    source project(':ThermalInnovation').sourceSets.main
                }
                ThermalLocomotion {
                    source project(':ThermalLocomotion').sourceSets.main
                }

                CoFHPotions {
                    source project(':CoFHPotions').sourceSets.main
                }
                CoFHTools {
                    source project(':CoFHTools').sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                CoFHCore {
                    source project(':CoFHCore').sourceSets.main
                }
                // CoFHWorld {
                //     source project(':CoFHWorld').sourceSets.main
                // }
                ArchersParadox {
                    source project(':ArchersParadox').sourceSets.main
                }
                Ensorcellation {
                    source project(':Ensorcellation').sourceSets.main
                }
                // Quartermastery {
                //     source project(':Quartermastery').sourceSets.main
                // }

                ThermalCore {
                    source project(':ThermalCore').sourceSets.main
                }
                ThermalCultivation {
                    source project(':ThermalCultivation').sourceSets.main
                }
                ThermalDynamics {
                    source project(':ThermalDynamics').sourceSets.main
                }
                ThermalEssentials {
                    source project(':ThermalEssentials').sourceSets.main
                }
                ThermalExpansion {
                    source project(':ThermalExpansion').sourceSets.main
                }
                ThermalFoundation {
                    source project(':ThermalFoundation').sourceSets.main
                }
                ThermalInnovation {
                    source project(':ThermalInnovation').sourceSets.main
                }
                ThermalLocomotion {
                    source project(':ThermalLocomotion').sourceSets.main
                }

                CoFHPotions {
                    source project(':CoFHPotions').sourceSets.main
                }
                CoFHTools {
                    source project(':CoFHTools').sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            ideaModule "${rootProject.name}.${project.name}.main"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'mytutorial', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                CoFHCore {
                    source project(':CoFHCore').sourceSets.main
                }
                // CoFHWorld {
                //     source project(':CoFHWorld').sourceSets.main
                // }
                ArchersParadox {
                    source project(':ArchersParadox').sourceSets.main
                }
                Ensorcellation {
                    source project(':Ensorcellation').sourceSets.main
                }
                // Quartermastery {
                //     source project(':Quartermastery').sourceSets.main
                // }

                ThermalCore {
                    source project(':ThermalCore').sourceSets.main
                }
                ThermalCultivation {
                    source project(':ThermalCultivation').sourceSets.main
                }
                ThermalDynamics {
                    source project(':ThermalDynamics').sourceSets.main
                }
                ThermalEssentials {
                    source project(':ThermalEssentials').sourceSets.main
                }
                ThermalExpansion {
                    source project(':ThermalExpansion').sourceSets.main
                }
                ThermalFoundation {
                    source project(':ThermalFoundation').sourceSets.main
                }
                ThermalInnovation {
                    source project(':ThermalInnovation').sourceSets.main
                }
                ThermalLocomotion {
                    source project(':ThermalLocomotion').sourceSets.main
                }

                CoFHPotions {
                    source project(':CoFHPotions').sourceSets.main
                }
                CoFHTools {
                    source project(':CoFHTools').sourceSets.main
                }
            }
        }
    }
}

dependencies {

    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    compile project(':CoFHCore')
    //compile project(':CoFHWorld')

    compile project(':ArchersParadox')
    compile project(':Ensorcellation')
    //compile project(':Quartermastery')

    compile project(':ThermalCore')
    compile project(':ThermalCultivation')
    compile project(':ThermalDynamics')
    compile project(':ThermalEssentials')
    compile project(':ThermalExpansion')
    compile project(':ThermalFoundation')
    compile project(':ThermalInnovation')
    compile project(':ThermalLocomotion')

    compile project(':CoFHPotions')
    compile project(':CoFHTools')

    compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "examplemod",
                "Specification-Vendor"    : "examplemodsareus",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "examplemodsareus",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact reobfArtifact
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}
